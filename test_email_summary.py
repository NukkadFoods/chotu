#!/usr/bin/env python3
"""
Test emailing the self-improvement achievement summary
"""

import sys
import os

# Add the correct path
sys.path.insert(0, '/Users/mahendrabahubali/chotu')

def test_email_summary():
    print("üìß Testing Email Summary Capability")
    print("=" * 50)
    
    # Read the achievement summary
    summary_file = "/Users/mahendrabahubali/chotu/SELF_IMPROVEMENT_ACHIEVEMENT.md"
    
    try:
        with open(summary_file, 'r') as f:
            summary_content = f.read()
        
        print("‚úÖ Achievement summary loaded successfully")
        print(f"üìÑ Content length: {len(summary_content)} characters")
        
        # Test the autonomous learning system's ability to email
        recipient = "ajay261999tiwari@gmail.com"
        subject = "ü§ñ Chotu AI Historic Achievement: Self-Improving AI System Success!"
        
        # Create email body with summary
        email_body = f"""Dear Ajay,

üéâ HISTORIC MILESTONE ACHIEVED! üéâ

Your Chotu AI autonomous learning system has just accomplished something extraordinary - it successfully created a tool for ITSELF! This represents a major breakthrough in AI self-improvement capabilities.

{summary_content}

---

This email was generated and sent by your autonomous learning system as a demonstration of its self-improvement capabilities.

Best regards,
Your Self-Improving Chotu AI System ü§ñ
        """
        
        print(f"\nüìß Preparing email to: {recipient}")
        print(f"üìã Subject: {subject}")
        print(f"üìÑ Body length: {len(email_body)} characters")
        
        # Test if we can use the existing email tool
        try:
            sys.path.insert(0, '/Users/mahendrabahubali/chotu/mcp/tools')
            from send_email import send_email
            
            print("\nüß™ Testing existing email tool...")
            result = send_email(recipient, subject, email_body)
            print(f"üìß Email result: {result}")
            
        except Exception as e:
            print(f"‚ùå Existing email tool failed: {e}")
            print("\nüîß Creating enhanced email capability...")
            create_enhanced_email_tool(recipient, subject, email_body)
            
    except FileNotFoundError:
        print("‚ùå Achievement summary file not found")
    except Exception as e:
        print(f"‚ùå Error loading summary: {e}")

def create_enhanced_email_tool(recipient, subject, body):
    """Create an enhanced email tool that can work with Gmail"""
    
    print("üõ†Ô∏è Creating enhanced email tool for Gmail...")
    
    enhanced_email_content = f'''#!/usr/bin/env python3
"""
Enhanced Email Tool with Gmail Support
Generated by autonomous learning system for self-reporting
"""

import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os

def send_gmail_notification(recipient_email, subject, body, sender_note="Chotu AI System"):
    """
    Send email notification via Gmail SMTP (requires app password)
    
    Args:
        recipient_email (str): Email address of recipient
        subject (str): Email subject
        body (str): Email body content
        sender_note (str): Sender identification
    
    Returns:
        dict: Result with status and message
    """
    
    # Gmail SMTP configuration
    smtp_server = "smtp.gmail.com"
    port = 587  # For starttls
    
    # Note: In production, you would need to configure:
    # 1. Gmail App Password (not regular password)
    # 2. Sender email and credentials
    # 3. Environment variables for security
    
    print(f"üìß Email Notification Prepared:")
    print(f"   To: {{recipient_email}}")
    print(f"   Subject: {{subject}}")
    print(f"   Body Length: {{len(body)}} characters")
    print(f"   Sender: {{sender_note}}")
    
    # For security demonstration, we'll show the email content instead of actually sending
    # In production, this would require proper Gmail authentication
    
    print("\\n" + "="*60)
    print("üìß EMAIL CONTENT PREVIEW:")
    print("="*60)
    print(f"TO: {{recipient_email}}")
    print(f"SUBJECT: {{subject}}")
    print("\\nBODY:")
    print("-"*40)
    print(body[:500] + "..." if len(body) > 500 else body)
    print("="*60)
    
    # Simulate email sending success
    return {{
        "status": "simulated_success",
        "message": "Email content prepared and displayed (would send via Gmail SMTP in production)",
        "recipient": recipient_email,
        "subject": subject,
        "body_length": len(body),
        "method": "gmail_smtp_simulation"
    }}

def send_achievement_notification():
    """Send the achievement summary notification"""
    
    recipient = "{recipient}"
    subject = "{subject}"
    body = """{body}"""
    
    result = send_gmail_notification(recipient, subject, body)
    
    print(f"\\nüéØ Email Notification Result:")
    print(f"   Status: {{result['status']}}")
    print(f"   Message: {{result['message']}}")
    
    return result

# Tool metadata
TOOL_METADATA = {{
    "name": "enhanced_email_notification",
    "category": "communication",
    "description": "Enhanced email tool with Gmail support for system notifications",
    "version": "1.0.0",
    "auto_generated": True,
    "created_at": "2025-08-09T07:35:00Z",
    "functions": ["send_gmail_notification", "send_achievement_notification"],
    "purpose": "self_reporting",
    "target_recipient": "{recipient}"
}}

if __name__ == "__main__":
    print("üìß Testing Enhanced Email Notification Tool")
    print("=" * 50)
    
    send_achievement_notification()
'''
    
    # Save the enhanced email tool
    enhanced_email_path = "/Users/mahendrabahubali/chotu/mcp/tools/enhanced_email_notification.py"
    
    with open(enhanced_email_path, 'w') as f:
        f.write(enhanced_email_content)
    
    print(f"‚úÖ Enhanced email tool created: {enhanced_email_path}")
    
    # Test the enhanced email tool
    try:
        import subprocess
        result = subprocess.run(
            ['python3', enhanced_email_path], 
            capture_output=True, 
            text=True, 
            cwd='/Users/mahendrabahubali/chotu'
        )
        
        if result.returncode == 0:
            print(f"üß™ Enhanced email tool test successful:")
            print(result.stdout)
        else:
            print(f"‚ùå Enhanced email tool test failed: {result.stderr}")
            
    except Exception as e:
        print(f"‚ùå Enhanced email tool test error: {e}")

if __name__ == "__main__":
    test_email_summary()
