#!/usr/bin/env python3
"""
AUTO-GENERATED TOOL: network_monitor
====================================
Network monitoring functionality generated by autonomous learning system
"""

import subprocess
import re
import os
import time
from datetime import datetime
from typing import Optional, Dict, List, Any

def ping_host(host: str = "8.8.8.8", count: int = 4) -> dict:
    """
    Ping a host and return connection statistics
    
    Args:
        host (str): Hostname or IP address to ping
        count (int): Number of ping packets to send
    
    Returns:
        dict: Ping results with latency, packet loss, and status
    """
    try:
        result = subprocess.run(
            ['ping', '-c', str(count), host],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        output = result.stdout
        
        # Parse packet loss
        loss_match = re.search(r'(\d+)% packet loss', output)
        packet_loss = int(loss_match.group(1)) if loss_match else None
        
        # Parse average latency
        latency_match = re.search(r'round-trip min/avg/max/stddev = ([\d.]+)/([\d.]+)/([\d.]+)/([\d.]+) ms', output)
        avg_latency = float(latency_match.group(2)) if latency_match else None
        
        success = result.returncode == 0 and (packet_loss is not None and packet_loss < 100)
        
        return {
            "success": success,
            "host": host,
            "packets_sent": count,
            "packet_loss_percent": packet_loss,
            "average_latency_ms": avg_latency,
            "status": "connected" if success else "disconnected",
            "timestamp": datetime.now().isoformat(),
            "raw_output": output.strip()
        }
        
    except subprocess.TimeoutExpired:
        return {
            "success": False,
            "host": host,
            "error": "Ping timeout",
            "status": "timeout",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "host": host,
            "error": str(e),
            "status": "error",
            "timestamp": datetime.now().isoformat()
        }

def check_internet_connectivity() -> dict:
    """
    Check internet connectivity using multiple reliable hosts
    
    Returns:
        dict: Internet connectivity status and speed test results
    """
    test_hosts = [
        ("8.8.8.8", "Google DNS"),
        ("1.1.1.1", "Cloudflare DNS"),
        ("208.67.222.222", "OpenDNS")
    ]
    
    results = []
    connected_count = 0
    total_latency = 0
    
    for host, name in test_hosts:
        ping_result = ping_host(host, count=2)
        results.append({
            "host": host,
            "name": name,
            "connected": ping_result["success"],
            "latency": ping_result.get("average_latency_ms"),
            "packet_loss": ping_result.get("packet_loss_percent")
        })
        
        if ping_result["success"]:
            connected_count += 1
            if ping_result.get("average_latency_ms"):
                total_latency += ping_result["average_latency_ms"]
    
    # Determine connection quality
    if connected_count == 0:
        quality = "disconnected"
        status_emoji = "‚ùå"
    elif connected_count <= len(test_hosts) // 2:
        quality = "poor"
        status_emoji = "üü°"
    else:
        avg_latency = total_latency / connected_count if connected_count > 0 else None
        if avg_latency and avg_latency < 50:
            quality = "excellent"
            status_emoji = "üü¢"
        elif avg_latency and avg_latency < 100:
            quality = "good"
            status_emoji = "üü¢"
        else:
            quality = "fair"
            status_emoji = "üü°"
    
    return {
        "connected": connected_count > 0,
        "connection_quality": quality,
        "status_emoji": status_emoji,
        "hosts_responding": connected_count,
        "hosts_total": len(test_hosts),
        "average_latency": total_latency / connected_count if connected_count > 0 else None,
        "test_results": results,
        "timestamp": datetime.now().isoformat()
    }

def get_network_info() -> dict:
    """
    Get current network interface information
    
    Returns:
        dict: Network interface details and IP addresses
    """
    try:
        # Get network interface info using ifconfig
        result = subprocess.run(['ifconfig'], capture_output=True, text=True, timeout=10)
        
        if result.returncode != 0:
            return {"success": False, "error": "Failed to get network info"}
        
        output = result.stdout
        
        # Parse active interfaces and IP addresses
        interfaces = {}
        current_interface = None
        
        for line in output.split('\n'):
            # Interface name line
            if re.match(r'^[a-zA-Z0-9]+:', line):
                current_interface = line.split(':')[0]
                interfaces[current_interface] = {"status": "unknown", "ips": []}
            
            # Status line
            elif 'status:' in line and current_interface:
                status_match = re.search(r'status: (\w+)', line)
                if status_match:
                    interfaces[current_interface]["status"] = status_match.group(1)
            
            # IP address line
            elif 'inet ' in line and current_interface:
                ip_match = re.search(r'inet ([\d.]+)', line)
                if ip_match:
                    interfaces[current_interface]["ips"].append(ip_match.group(1))
        
        # Filter to active interfaces with IPs
        active_interfaces = {
            name: info for name, info in interfaces.items() 
            if info["status"] == "active" and info["ips"]
        }
        
        return {
            "success": True,
            "active_interfaces": active_interfaces,
            "total_interfaces": len(interfaces),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        return {"success": False, "error": str(e)}

def network_health_check() -> str:
    """
    Perform a comprehensive network health check
    
    Returns:
        str: Formatted network health report
    """
    try:
        # Check internet connectivity
        connectivity = check_internet_connectivity()
        
        # Get network info
        network_info = get_network_info()
        
        # Build report
        report = []
        report.append("üåê Network Health Check")
        report.append("=" * 30)
        
        # Connectivity status
        emoji = connectivity["status_emoji"]
        quality = connectivity["connection_quality"]
        hosts_ok = connectivity["hosts_responding"]
        hosts_total = connectivity["hosts_total"]
        
        report.append(f"{emoji} Internet: {quality.title()} ({hosts_ok}/{hosts_total} hosts responding)")
        
        if connectivity["average_latency"]:
            report.append(f"‚ö° Average Latency: {connectivity['average_latency']:.1f}ms")
        
        # Network interfaces
        if network_info["success"] and network_info["active_interfaces"]:
            report.append(f"\nüîå Active Interfaces:")
            for interface, info in network_info["active_interfaces"].items():
                ips = ", ".join(info["ips"])
                report.append(f"   {interface}: {ips}")
        
        return "\n".join(report)
        
    except Exception as e:
        return f"‚ùå Network check failed: {str(e)}"

# Tool metadata
TOOL_METADATA = {
    "name": "network_monitor",
    "category": "network_monitoring", 
    "description": "Monitor network connectivity, latency, and interface status",
    "version": "1.0.0",
    "auto_generated": True,
    "created_at": "2025-08-09T07:20:00Z",
    "functions": ["ping_host", "check_internet_connectivity", "get_network_info", "network_health_check"],
    "os_compatibility": ["macOS", "Linux"],
    "dependencies": ["ping (built-in)", "ifconfig (built-in)"]
}

if __name__ == "__main__":
    # Test the network monitoring functions
    print("üåê Testing Network Monitor Tool")
    print("=" * 40)
    
    # Test quick health check
    print("üìä Network Health Check:")
    print(network_health_check())
    
    print("\nüèì Ping Test (Google DNS):")
    ping_result = ping_host("8.8.8.8", count=3)
    if ping_result["success"]:
        print(f"   ‚úÖ Connected to {ping_result['host']}")
        print(f"   üì° Latency: {ping_result['average_latency_ms']:.1f}ms")
        print(f"   üì¶ Packet Loss: {ping_result['packet_loss_percent']}%")
    else:
        print(f"   ‚ùå Failed to reach {ping_result['host']}: {ping_result.get('error', 'Unknown error')}")
