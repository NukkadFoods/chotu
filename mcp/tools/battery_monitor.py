#!/usr/bin/env python3
"""
AUTO-GENERATED TOOL: battery_monitor
===================================
Battery monitoring functionality generated by autonomous learning system
"""

import subprocess
import os
from datetime import datetime
from typing import Optional, Dict, Any

def get_battery_status() -> dict:
    """
    Get comprehensive battery status information
    
    Returns:
        dict: Battery status with percentage, charging state, and time estimates
    """
    try:
        # Get battery information using pmset
        result = subprocess.run(
            ['pmset', '-g', 'batt'], 
            capture_output=True, 
            text=True, 
            timeout=5
        )
        
        if result.returncode != 0:
            return {"success": False, "error": "Failed to get battery information"}
        
        output = result.stdout
        
        # Parse battery percentage
        percentage_match = __import__('re').search(r'(\d+)%', output)
        percentage = int(percentage_match.group(1)) if percentage_match else None
        
        # Parse charging status
        is_charging = 'AC Power' in output
        is_on_battery = 'Battery Power' in output
        
        # Parse time remaining
        time_remaining = None
        time_match = __import__('re').search(r'(\d+:\d+) remaining', output)
        if time_match:
            time_remaining = time_match.group(1)
        elif 'no estimate' in output.lower():
            time_remaining = "calculating..."
        
        status = {
            "success": True,
            "battery_percentage": percentage,
            "is_charging": is_charging,
            "is_on_battery": is_on_battery,
            "time_remaining": time_remaining,
            "raw_output": output.strip(),
            "timestamp": datetime.now().isoformat()
        }
        
        return status
        
    except subprocess.TimeoutExpired:
        return {"success": False, "error": "Battery check timed out"}
    except Exception as e:
        return {"success": False, "error": str(e)}

def get_battery_percentage() -> str:
    """
    Get just the battery percentage as a simple string
    
    Returns:
        str: Battery percentage with status message
    """
    try:
        status = get_battery_status()
        
        if not status["success"]:
            return f"❌ Error: {status['error']}"
        
        percentage = status["battery_percentage"]
        charging_status = "🔌 Charging" if status["is_charging"] else "🔋 On Battery"
        
        if status["time_remaining"]:
            return f"🔋 Battery: {percentage}% ({charging_status}) - {status['time_remaining']} remaining"
        else:
            return f"🔋 Battery: {percentage}% ({charging_status})"
            
    except Exception as e:
        return f"❌ Battery check failed: {str(e)}"

# Tool metadata
TOOL_METADATA = {
    "name": "battery_monitor",
    "category": "system_monitoring",
    "description": "Monitor MacBook battery status, percentage, and charging state",
    "version": "1.0.0",
    "auto_generated": True,
    "created_at": "2025-08-09T07:15:00Z",
    "functions": ["get_battery_status", "get_battery_percentage"],
    "os_compatibility": ["macOS"],
    "dependencies": ["pmset (built-in)"]
}

if __name__ == "__main__":
    # Test the battery monitoring functions
    print("🔋 Testing Battery Monitor Tool")
    print("=" * 40)
    
    # Test simple percentage function
    print("📊 Simple Battery Check:")
    print(get_battery_percentage())
    
    print("\n📋 Detailed Battery Status:")
    status = get_battery_status()
    if status["success"]:
        print(f"   Percentage: {status['battery_percentage']}%")
        print(f"   Charging: {'Yes' if status['is_charging'] else 'No'}")
        print(f"   On Battery: {'Yes' if status['is_on_battery'] else 'No'}")
        print(f"   Time Remaining: {status['time_remaining'] or 'N/A'}")
    else:
        print(f"   Error: {status['error']}")
